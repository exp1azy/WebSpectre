@inject NetworkHandler NetworkHandler

@page "/"

<PageTitle>Мониторинг</PageTitle>

@if (toastMessages.Any())
{
    <Toasts class="p-3" Messages="toastMessages" AutoHide="true" Delay="5000" Placement="ToastsPlacement.BottomRight" />
}
<div class="ws-add-delete-agent">
    <Button @onclick="ShowAddAgent" Color="ButtonColor.Success" Size="Size.ExtraLarge" TooltipTitle="Позволяет зарегистрировать нового агента в базе данных"
    TooltipPlacement="TooltipPlacement.Right" TooltipColor="TooltipColor.Dark">
        Добавить агента
    </Button>

    <AddAgent @ref="addAgent" OnSubmitSuccess="OnAgentCreated"></AddAgent>
</div>
@if (hosts.Any())
{
    <div class="ws-agents">
    @foreach (var host in hosts)
    {
        <div class="ws-agent">
            <div class="ws-agent-host">
                @{
                    var status = hostsStatus.GetValueOrDefault(host.Key);
                    if (status == null)
                    {
                        <div class="state red"></div>
                    }
                    else if ((bool)status)
                    {
                        <div class="state green"></div>
                    }
                    else
                    {
                        <div class="state orange"></div>
                    }
                }
                <span class="ws-agent-hostname">@host.Key</span>                 
            </div>                                   
            <div class="ws-agent-info">
                <Button @onclick="ShowAbout" Color="ButtonColor.Primary" TooltipTitle="Посмотреть информацию о данной машине"
                TooltipPlacement="TooltipPlacement.Bottom" TooltipColor="TooltipColor.Dark" Disabled=@(status == null ? true : false)>
                    Информация
                </Button>

                <Button @onclick="ShowAvailableDevices" Color="ButtonColor.Primary" TooltipTitle="Посмотреть информацию о сетевых адаптерах данной машины"
                TooltipPlacement="TooltipPlacement.Bottom" TooltipColor="TooltipColor.Dark" Disabled=@(status == null ? true : false)>
                    Сетевые адаптеры
                </Button>

                <Button @onclick="ShowConfirmDeletion" Color="ButtonColor.Danger" TooltipTitle="Позволяет удалить агента из базы данных"
                TooltipPlacement="TooltipPlacement.Bottom" TooltipColor="TooltipColor.Dark">
                    Удалить агента
                </Button>

                <Button Color="ButtonColor.Success" TooltipTitle="Позволяет запустить перехват сетевого трафика на указанной машине"
                TooltipPlacement="TooltipPlacement.Bottom" TooltipColor="TooltipColor.Dark" Disabled=@(status == null ? true : false)>
                    Запустить
                </Button>
            </div>                                    
        </div>

        <ConfirmDeletion @ref="confirmDeletion" Host="@host.Key" OnDeleted="OnAgentDeleted"></ConfirmDeletion>

        if (host.Value != null)
        {
            <About @ref="aboutModal" Host="@host.Key" Info="@host.Value"></About>
            <AvailableDevices @ref="availableDevices" Host="@host.Key" Info="@host.Value"></AvailableDevices>
        }           
    }
    </div>
}
else
{
    <div class="ws-no-agents">Ожидаем получение агентов...</div>
}

@code {
    private string error;
    private List<string> hostnames = new List<string>();
    private Dictionary<string, HostInfo?> hosts = new Dictionary<string, HostInfo?>();
    private Dictionary<string, bool?> hostsStatus = new Dictionary<string, bool?>();
    private string message;
    private ulong delay;
    private Jitter jitter = new Jitter();
    private Packet packet;
    private List<Statistics> statistics = new List<Statistics>();
    private Throughput throughput = new Throughput();

    private About aboutModal;
    private async Task ShowAbout() => await aboutModal.OnShowModalClick();

    private AvailableDevices availableDevices;
    private async Task ShowAvailableDevices() => await availableDevices.OnShowModalClick();

    private List<ToastMessage> toastMessages = new();

    private AddAgent addAgent;
    private async Task ShowAddAgent() => await addAgent.OnShowModalClick();
    private async Task OnAgentCreated(AgentModel? agent)
    {
        if (agent != null)
        {
            toastMessages.Add(new ToastMessage
            {
                Message = $"Агент {agent.Hostname} был успешно зарегистрирован",
                Title = "Информация",
                HelpText = $"{DateTime.Now}",
                Type = ToastType.Info
            });
        }
        else {
            toastMessages.Add(new ToastMessage
            {
                Message = $"Не удалось создать агента",
                Title = "Ошибка",
                HelpText = $"{DateTime.Now}",
                Type = ToastType.Warning
            });
        }

        await NetworkHandler.GetAgentsAsync();
        StateHasChanged();
    }

    private ConfirmDeletion confirmDeletion;
    private async Task ShowConfirmDeletion() => await confirmDeletion.OnShowModalClick();
    private async Task OnAgentDeleted(string? host)
    {
        if (host != null)
        {
            toastMessages.Add(new ToastMessage
            {
                Message = $"Выполнено удаление агента {host}",
                Title = "Информация",
                HelpText = $"{DateTime.Now}",
                Type = ToastType.Info
            });
        }
        else
        {
            toastMessages.Add(new ToastMessage
            {
                Message = $"Не удалось удалить агента",
                Title = "Ошибка",
                HelpText = $"{DateTime.Now}",
                Type = ToastType.Warning
            });
        }

        await NetworkHandler.GetAgentsAsync();
        StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        OnReceived();
    }

    private void OnReceived()
    {
        NetworkHandler.OnDelayReceived += (s, ea) =>
        {
            delay = ea.Delay;
            StateHasChanged();
        };

        NetworkHandler.OnErrorReceived += (s, ea) =>
        {
            error = ea.Error;
            StateHasChanged();
        };

        NetworkHandler.OnHostsReceived += (s, ea) =>
        {
            hosts = ea.Hosts;
            StateHasChanged();
        };

        NetworkHandler.OnStatusReceived += (s, ea) =>
        {
            hostsStatus = ea.AgentsStatus;
            StateHasChanged();
        };

        NetworkHandler.OnHostnamesReceived += (s, ea) =>
        {
            hostnames = ea.Hostnames;
            StateHasChanged();
        };

        NetworkHandler.OnJitterReceived += (s, ea) =>
        {
            jitter = ea.Jitter;
            StateHasChanged();
        };

        NetworkHandler.OnMessageReceived += (s, ea) =>
        {
            message = ea.Message;
            StateHasChanged();
        };

        NetworkHandler.OnPacketReceived += (s, ea) =>
        {
            packet = ea.Packet;
            StateHasChanged();
        };

        NetworkHandler.OnStatisticsReceived += (s, ea) =>
        {
            statistics = ea.Statistics;
            StateHasChanged();
        };

        NetworkHandler.OnThroughputReceived += (s, ea) =>
        {
            throughput = ea.Throughput;
            StateHasChanged();
        };
    }
}