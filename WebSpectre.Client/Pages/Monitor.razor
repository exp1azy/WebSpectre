@inject NetworkHandler NetworkHandler

@page "/"

<PageTitle>Мониторинг</PageTitle>

<div class="ws-add-delete-agent">
    <button class="ws-add">Добавить агента</button>
</div>
@if (hosts.Any())
{
    <div class="ws-agents">
    @foreach (var host in hosts)
    {
        <div class="ws-agent">
            <div class="ws-agent-host">
                <img src="icons/host.png" alt="agent" class="agent-icon">
                <span class="ws-agent-hostname">@host.Key</span>
                @{
                    var status = hostsStatus.GetValueOrDefault(host.Key);
                    if (status == null)
                    {
                        <div class="state red"></div>
                    }
                    else if ((bool)status)
                    {
                        <div class="state green"></div>
                    }
                    else
                    {
                        <div class="state orange"></div>
                    }
                }                 
            </div>              
            @{
                if (hostsStatus.GetValueOrDefault(host.Key) == null)
                {
                    <div class="ws-agent-info">
                        <button class="ws-agent-button-disabled" disabled>Информация</button>
                        <button class="ws-agent-button-disabled" disabled>Сетевые адаптеры</button>
                        <button class="ws-agent-delete">Удалить агента</button>
                    </div>
                    <div class="ws-agent-state">
                        <button class="ws-agent-start-disabled" disabled>Запустить</button>
                    </div>
                }
                else
                {
                    <div class="ws-agent-info">
                        <button class="ws-agent-button" @onclick="ShowAbout">Информация</button>
                        <button class="ws-agent-button">Сетевые адаптеры</button>
                        <button class="ws-agent-delete">Удалить агента</button>
                    </div>
                    <div class="ws-agent-state">
                        <button class="ws-agent-start">Запустить</button>
                    </div>
                }
            }              
        </div>

        <About IsModalOpen="isAboutOpen" Host="@host.Key" Info="host.Value"></About>
    }
    </div>
}
else
{
    <div class="ws-no-agents">Ожидаем получение агентов...</div>
}

@code {
    private string error;
    private List<string> hostnames = new List<string>();
    private Dictionary<string, HostInfo?> hosts = new Dictionary<string, HostInfo?>();
    private Dictionary<string, bool?> hostsStatus = new Dictionary<string, bool?>();
    private string message;
    private ulong delay;
    private Jitter jitter = new Jitter();
    private Packet packet;
    private List<Statistics> statistics = new List<Statistics>();
    private Throughput throughput = new Throughput();

    private bool isAboutOpen = false;

    private void ShowAbout()
    {
        isAboutOpen = true;
        StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        OnReceived();
    }

    private void OnReceived()
    {
        NetworkHandler.OnDelayReceived += (s, ea) =>
        {
            delay = ea.Delay;
            StateHasChanged();
        };

        NetworkHandler.OnErrorReceived += (s, ea) =>
        {
            error = ea.Error;
            StateHasChanged();
        };

        NetworkHandler.OnHostsReceived += (s, ea) =>
        {
            hosts = ea.Hosts;
            StateHasChanged();
        };

        NetworkHandler.OnStatusReceived += (s, ea) =>
        {
            hostsStatus = ea.AgentsStatus;
            StateHasChanged();
        };

        NetworkHandler.OnHostnamesReceived += (s, ea) =>
        {
            hostnames = ea.Hostnames;
            StateHasChanged();
        };

        NetworkHandler.OnJitterReceived += (s, ea) =>
        {
            jitter = ea.Jitter;
            StateHasChanged();
        };

        NetworkHandler.OnMessageReceived += (s, ea) =>
        {
            message = ea.Message;
            StateHasChanged();
        };

        NetworkHandler.OnPacketReceived += (s, ea) =>
        {
            packet = ea.Packet;
            StateHasChanged();
        };

        NetworkHandler.OnStatisticsReceived += (s, ea) =>
        {
            statistics = ea.Statistics;
            StateHasChanged();
        };

        NetworkHandler.OnThroughputReceived += (s, ea) =>
        {
            throughput = ea.Throughput;
            StateHasChanged();
        };
    }
}